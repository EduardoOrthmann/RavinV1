-- ENUMS
-- EducationLevel enum
CREATE TYPE education_level AS ENUM (
    'PRIMARY_EDUCATION',
    'ELEMENTARY_EDUCATION',
    'SECONDARY_EDUCATION',
    'HIGHER_EDUCATION',
    'MASTERS_EDUCATION',
    'DOCTORAL_EDUCATION'
);

-- MaritalStatus enum
CREATE TYPE marital_status AS ENUM (
    'MARRIED',
    'DIVORCED',
    'WIDOWED',
    'SINGLE'
);

-- OrderStatus enum
CREATE TYPE order_item_status AS ENUM (
    'READY',
    'PREPARING',
    'WAITING',
    'CANCELED',
    'DELIVERED'
);

-- Position enum
CREATE TYPE job_position AS ENUM (
    'HOST',
    'COOK',
    'CASHIER',
    'MANAGER',
    'WAITER',
    'CLEANER'
);

-- Role enum
CREATE TYPE role AS ENUM (
    'ADMIN',
    'MANAGER',
    'CUSTOMER',
    'EMPLOYEE'
);

-- TableStatus enum
CREATE TYPE table_status AS ENUM (
    'AVAILABLE',
    'RESERVED',
    'OCCUPIED',
    'UNAVAILABLE'
);

-- PROCEDURE
CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS
$$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

-- USER
CREATE TABLE "user"
(
    id       SERIAL PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL,
    role     ROLE         NOT NULL,
    token    CHAR(10) UNIQUE
);

-- CUSTOMER
CREATE TABLE customer
(
    id           SERIAL PRIMARY KEY,
    table_id     INTEGER,
    user_id      INTEGER      NOT NULL,
    name         VARCHAR(100) NOT NULL,
    phone_number VARCHAR(20)  NOT NULL,
    birth_date   DATE         NOT NULL,
    cpf          CHAR(14)     NOT NULL UNIQUE,
    country      VARCHAR(100),
    state        VARCHAR(100),
    city         VARCHAR(100),
    zip_code     CHAR(10),
    neighborhood VARCHAR(100),
    street       VARCHAR(100),
    is_active    BOOLEAN      NOT NULL DEFAULT TRUE,
    created_at   TIMESTAMP    NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMP    NOT NULL DEFAULT NOW(),
    created_by   INTEGER,
    updated_by   INTEGER,
    FOREIGN KEY (table_id) REFERENCES "table" (id) ON DELETE SET NULL,
    FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
);

CREATE TRIGGER update_customer_updated_at
    BEFORE UPDATE
    ON customer
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

-- EMPLOYEE
CREATE TABLE employee
(
    id               SERIAL PRIMARY KEY,
    user_id          INTEGER         NOT NULL,
    name             VARCHAR(100)    NOT NULL,
    phone_number     VARCHAR(20)     NOT NULL,
    birth_date       DATE            NOT NULL,
    cpf              CHAR(14)        NOT NULL UNIQUE,
    country          VARCHAR(100),
    state            VARCHAR(100),
    city             VARCHAR(100),
    zip_code         CHAR(10),
    neighborhood     VARCHAR(100),
    street           VARCHAR(100),
    is_active        BOOLEAN         NOT NULL DEFAULT TRUE,
    created_at       TIMESTAMP       NOT NULL DEFAULT NOW(),
    updated_at       TIMESTAMP       NOT NULL DEFAULT NOW(),
    created_by       INTEGER,
    updated_by       INTEGER,
    rg               CHAR(20),
    marital_status   MARITAL_STATUS,
    education_level  EDUCATION_LEVEL,
    position         JOB_POSITION    NOT NULL,
    work_card_number CHAR(20),
    admission_date   DATE            NOT NULL DEFAULT NOW(),
    resignation_date DATE,
    is_available     BOOLEAN         NOT NULL DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
);

CREATE TRIGGER update_employee_updated_at
    BEFORE UPDATE
    ON employee
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

-- MENU
CREATE TABLE menu
(
    id         SERIAL PRIMARY KEY,
    name       VARCHAR(100) NOT NULL,
    menu_code  CHAR(20)     NOT NULL UNIQUE,
    is_active  BOOLEAN      NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP    NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP    NOT NULL DEFAULT NOW(),
    created_by INTEGER,
    updated_by INTEGER
);

CREATE TRIGGER update_menu_updated_at
    BEFORE UPDATE
    ON menu
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

-- PRODUCT
CREATE TABLE product
(
    id               SERIAL PRIMARY KEY,
    name             VARCHAR(100)   NOT NULL,
    description      VARCHAR(100)   NOT NULL,
    product_code     CHAR(20)       NOT NULL UNIQUE,
    cost_price       DECIMAL(10, 2) NOT NULL,
    sale_price       DECIMAL(10, 2) NOT NULL,
    preparation_time TIME           NOT NULL,
    is_active        BOOLEAN        NOT NULL DEFAULT TRUE,
    is_available     BOOLEAN        NOT NULL DEFAULT TRUE,
    menu_id          INTEGER,
    created_at       TIMESTAMP      NOT NULL DEFAULT NOW(),
    updated_at       TIMESTAMP      NOT NULL DEFAULT NOW(),
    created_by       INTEGER,
    updated_by       INTEGER,
    FOREIGN KEY (menu_id) REFERENCES menu (id)
);

CREATE TRIGGER update_product_updated_at
    BEFORE UPDATE
    ON product
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

-- TABLE
CREATE TABLE "table"
(
    id           SERIAL PRIMARY KEY,
    name         VARCHAR(100) NOT NULL UNIQUE,
    table_number SMALLINT     NOT NULL UNIQUE,
    max_capacity SMALLINT     NOT NULL,
    status       TABLE_STATUS NOT NULL DEFAULT 'AVAILABLE',
    created_at   TIMESTAMP    NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMP    NOT NULL DEFAULT NOW(),
    created_by   INTEGER,
    updated_by   INTEGER
);

CREATE TRIGGER update_table_updated_at
    BEFORE UPDATE
    ON "table"
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

-- RESERVED TABLE
CREATE TABLE reserved_table
(
    id             SERIAL PRIMARY KEY,
    table_id       INTEGER   NOT NULL,
    number_of_seat SMALLINT  NOT NULL,
    reserved_start TIMESTAMP NOT NULL,
    reserved_end   TIMESTAMP NOT NULL,
    created_at     TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at     TIMESTAMP NOT NULL DEFAULT NOW(),
    created_by     INTEGER,
    updated_by     INTEGER,
    FOREIGN KEY (table_id) REFERENCES "table" (id) ON DELETE CASCADE
);

CREATE TRIGGER update_reserved_table_updated_at
    BEFORE UPDATE
    ON reserved_table
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

CREATE TABLE reserved_table_customer
(
    id                SERIAL PRIMARY KEY,
    reserved_table_id INTEGER   NOT NULL,
    customer_id       INTEGER   NOT NULL,
    FOREIGN KEY (reserved_table_id) REFERENCES reserved_table (id) ON DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES customer (id) ON DELETE CASCADE
);

-- ORDER
CREATE TABLE "order"
(
    id          SERIAL PRIMARY KEY,
    table_id    INTEGER        NOT NULL,
    customer_id INTEGER        NOT NULL,
    is_paid     BOOLEAN        NOT NULL DEFAULT FALSE,
    total_price DECIMAL(10, 2) NOT NULL,
    created_at  TIMESTAMP      NOT NULL DEFAULT NOW(),
    updated_at  TIMESTAMP      NOT NULL DEFAULT NOW(),
    created_by  INTEGER,
    updated_by  INTEGER,
    FOREIGN KEY (table_id) REFERENCES "table" (id) ON DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES customer (id) ON DELETE CASCADE
);

CREATE TRIGGER update_order_updated_at
    BEFORE UPDATE
    ON "order"
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

-- ORDER ITEM
CREATE TABLE order_item
(
    id          SERIAL PRIMARY KEY,
    order_id    INTEGER           NOT NULL,
    product_id  INTEGER           NOT NULL,
    employee_id INTEGER,
    quantity    SMALLINT          NOT NULL,
    total_price DECIMAL(10, 2)    NOT NULL,
    status      ORDER_ITEM_STATUS NOT NULL DEFAULT 'WAITING',
    created_at  TIMESTAMP         NOT NULL DEFAULT NOW(),
    updated_at  TIMESTAMP         NOT NULL DEFAULT NOW(),
    created_by  INTEGER,
    updated_by  INTEGER,
    FOREIGN KEY (order_id) REFERENCES "order" (id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES product (id) ON DELETE CASCADE,
    FOREIGN KEY (employee_id) REFERENCES employee (id) ON DELETE SET NULL
);

CREATE TRIGGER update_order_item_updated_at
    BEFORE UPDATE
    ON order_item
    FOR EACH ROW
EXECUTE PROCEDURE
    update_updated_at_column();

-- ORDER_ITEM_COMMENT
CREATE TABLE order_item_comment
(
    id            SERIAL PRIMARY KEY,
    order_item_id INTEGER      NOT NULL,
    comment       VARCHAR(100) NOT NULL,
    FOREIGN KEY (order_item_id) REFERENCES order_item (id) ON DELETE CASCADE
);